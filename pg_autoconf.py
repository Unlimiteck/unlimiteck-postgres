import argparse
import multiprocessing
import psutil

parser = argparse.ArgumentParser(description='Generates automatically postgres configuration.')
parser.add_argument('--ram_factor', action="store", type=float, default=0.5)
parser.add_argument('--cpu_factor', action="store", type=float, default=1.0)
args = parser.parse_args()

total_ram_megabytes = int(psutil.virtual_memory().total / (1024 * 1024))
available_ram_megabytes = int(args.ram_factor * total_ram_megabytes)

cpu_cores = multiprocessing.cpu_count()
available_cpu_cores = int(args.cpu_factor * cpu_cores)


def clamp(value, target_format, min_value=None, max_value=None):
    """
    Clamps a value inside a range (defined by an optional min_value and max_value)
    and converts the result to a target format.
    """
    if min_value is not None:
        value = max(value, min_value)
    if max_value is not None:
        value = min(value, max_value)

    return target_format(value)


print("# Autogenerated file from pg_autoconf")
print("# Based on https://pgtune.leopard.in.ua/")
print("# DB Version: 10")
print("# OS Type: linux")
print("# DB Type: mixed")
print("# Total Memory (RAM): {}MB".format(total_ram_megabytes))
print("# Available RAM for postgres: {}MB ({})".format(available_ram_megabytes, args.ram_factor))
print("# CPUs num: {}".format(cpu_cores))
print("# Available CPUs num: {} ({})".format(available_cpu_cores, args.cpu_factor))
print("# Data Storage: ssd")

print("max_connections = 100")
print("shared_buffers = {}MB".format(clamp(0.25 * available_ram_megabytes, int)))
print("effective_cache_size = {}MB".format(clamp(0.75 * available_ram_megabytes, int)))
print("maintenance_work_mem = {}MB".format(clamp(0.02 * available_ram_megabytes, int, min_value=64)))
print("checkpoint_completion_target = 0.9")
print("wal_buffers = 16MB")
print("default_statistics_target = 100")
print("random_page_cost = 1.1")
print("effective_io_concurrency = 200")
print("work_mem = 5242kB")
print("min_wal_size = 1GB")
print("max_wal_size = 4GB")
print("max_worker_processes = {}".format(available_cpu_cores))
print("max_parallel_workers_per_gather = {}".format(clamp(0.5 * available_cpu_cores, int, min_value=1)))
print("max_parallel_workers = {}".format(available_cpu_cores))

print("listen_addresses = '*'")
print("log_timezone = 'UTC'")

print("datestyle = 'iso, mdy'")
print("timezone = 'UTC'")
print("lc_messages = 'en_US.utf8'			# locale for system error message")
print("lc_monetary = 'en_US.utf8'			# locale for monetary formatting")
print("lc_numeric = 'en_US.utf8'			# locale for number formatting")
print("lc_time = 'en_US.utf8'				# locale for time formatting")

print("# default configuration for text search")
print("default_text_search_config = 'pg_catalog.english'")
